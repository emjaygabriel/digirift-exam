{"version":3,"file":"js/about.7ac5a7c2.js","mappings":"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","sources":["webpack://digirift-exam/./src/views/ToDoListVuetifyVersion.vue","webpack://digirift-exam/./src/components/ToDoListVuetify.vue","webpack://digirift-exam/./src/components/ToDoListVuetify.vue?e885","webpack://digirift-exam/./src/views/ToDoListVuetifyVersion.vue?5c2e"],"sourcesContent":["<template>\n  <ToDoListVuetify />\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\n\n// Components\nimport ToDoListVuetify from '../components/ToDoListVuetify.vue';\n\nexport default defineComponent({\n  name: 'ToDoListVuetifyVersion',\n\n  components: {\n    ToDoListVuetify,\n  },\n});\n</script>\n","<template>\r\n    <h1 class=\"main-title\">Vue ToDo List</h1>\r\n    <div class=\"standard-tasks-card\">\r\n        <div class=\"tasks-status-bar\">\r\n            <div @click=\"ViewActiveTasks\" class=\"status-text normal\" :class=\"{'active': on_view === 'active'}\" title=\"view active tasks\">\r\n              Tasks <span class=\"count\">{{ active_tasks_count }}</span>\r\n            </div>\r\n            <div @click=\"ViewFinishedTasks\" class=\"status-text normal\" :class=\"{'active': on_view === 'finished'}\" title=\"view finished tasks\">\r\n              Tasks Done <span class=\"count\">{{ finished_tasks_count }}</span>\r\n            </div>\r\n            <div @click=\"ViewDeletedTasks\" class=\"status-text red\" :class=\"{'active': on_view === 'deleted'}\" title=\"view deleted tasks\">\r\n              <font-awesome-icon :icon=\"['fas', 'trash']\" /> Tasks \r\n            </div>\r\n        </div>\r\n        <div v-if=\"task_preview.length > 0\" class=\"tasks-list\">\r\n            <TaskItem v-for=\"($task, $index) in task_preview\" :task=\"$task\" :on_view=\"on_view\" :key=\"$index\" @DeleteTask=\"DeleteTask\" @UpdateTask=\"UpdateTask\"></TaskItem>\r\n        </div>\r\n        <div v-else class=\"tasks-list\">\r\n            <h3>There are no tasks.</h3>\r\n        </div>\r\n        <div class=\"tasks-action-bar\">\r\n          <div class=\"text-entry\">\r\n            <button class=\"add-task\" @click=\"AddTask\"><font-awesome-icon :icon=\"['fas', 'circle-plus']\" /></button>\r\n            <input type=\"text\" class=\"input\" @keydown.enter.prevent=\"AddTask\" v-model=\"text_entry\" />\r\n          </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"status_message\" v-if=\"status_message.trim().length > 0\">{{ status_message }}</div>\r\n</template>\r\n\r\n<script>\r\nimport TaskItem from '../components/TaskItem.vue';\r\n\r\n\r\nexport default {\r\n  name: 'ToDoListVuetify',\r\n  components: {\r\n    TaskItem,\r\n  },\r\n  data: () => ({\r\n    text_entry: \"\", // variable for entering the name of the new task\r\n    tasks: [], // array list of unfiltered tasks\r\n    task_preview: [], // filtered array of tasks which is viewable \r\n    status_message: \"\", // message notes if there is an error (validation of empty text entry)\r\n    on_view: \"active\" // serves as flag of what is being viewed in the card\r\n  }),\r\n  created() {\r\n    try { // validates if there is array data in local storage - creates one if there is none.\r\n      const local_tasks = JSON.parse(localStorage.getItem(\"tasks\"));\r\n      if(typeof local_tasks !== 'undefined' && local_tasks !== null) {\r\n        this.tasks = local_tasks; \r\n        this.ViewActiveTasks(); // initially views the active tasks\r\n      } else {\r\n        localStorage.setItem(\"tasks\", JSON.stringify([])); // creates the local storage if there is none\r\n        this.ViewActiveTasks(); // initially views the active tasks\r\n      }\r\n    } catch (error) {\r\n      this.status_message = error;\r\n    }\r\n\r\n  }, \r\n  watch: {\r\n    tasks: {\r\n      handler: function() { // watches tasks data changes and update the task_preview array depending on whats being viewed (active, deleted or finished)\r\n          switch(this.on_view) {\r\n            case \"active\":\r\n              this.ViewActiveTasks(); break; // views the active tasks\r\n            case \"finished\":\r\n              this.ViewFinishedTasks(); break; // views finished tasks\r\n            case \"deleted\":\r\n              this.ViewDeletedTasks(); break; // views deleted tasks\r\n            default:\r\n              break;\r\n          }\r\n\r\n          // updates the local storage every changes happen on the tasks array \r\n          localStorage.setItem(\"tasks\", JSON.stringify(this.tasks));\r\n          this.$store.dispatch('update_all_tasks', this.tasks);\r\n      },\r\n      deep: true // set deep to true to checked deep changes within the array objects\r\n    }\r\n  },\r\n  computed: {\r\n    finished_tasks_count() { // computed function for counting the finished task in an array - this is automatically updated where there is changes in tasks array\r\n      if(this.tasks.length < 1) { return 0; } // returns 0 if there are no tasks\r\n      const $count = this.tasks.reduce((count, obj) => {\r\n        if (obj.status.done === true && obj.status.deleted === false) {\r\n          return count + 1;\r\n        } else {\r\n          return count;\r\n        }\r\n      },0)\r\n\r\n      return $count;\r\n    },\r\n    active_tasks_count() { // computed function for counting the active task in an array - this is automatically updated where there is changes in tasks array\r\n      if(this.tasks.length < 1) { return 0; } // returns 0 if there are no tasks\r\n      const $count = this.tasks.reduce((count, obj) => {\r\n        if (obj.status.done === false && obj.status.deleted === false) {\r\n          return count + 1;\r\n        } else {\r\n          return count;\r\n        }\r\n      },0)\r\n\r\n      return $count;\r\n    },\r\n    deleted_task_count() { // computed function for counting the deleted task in an array (computed function not in use)\r\n      if(this.tasks.length < 1) { return 0; } // returns 0 if there are no tasks\r\n      const $count = this.tasks.reduce((count, obj) => {\r\n        if (obj.status.deleted === true) {\r\n          return count + 1;\r\n        } else {\r\n          return count;\r\n        }\r\n      },0)\r\n\r\n      return $count;\r\n    }\r\n  },\r\n  methods: {\r\n    AddTask: function() { // add task event\r\n      if(this.text_entry.trim().length !== 0) { // validation for empty task entry\r\n\r\n        const $new_task = { // new task were created in a constant variable\r\n          id: Math.floor(Math.random() * 100000001), // just a random generation of numbers for ID\r\n          name: this.text_entry,\r\n          status: {\r\n            done: false,\r\n            deleted: false\r\n          }\r\n        }\r\n        this.tasks = [...this.tasks, $new_task]; // es6 - adding the new task into the array\r\n        this.status_message = \"New task added!\";\r\n        this.text_entry = \"\"; // clearing the text entry after adding the new task\r\n        this.ViewActiveTasks(); // redirects to active task;\r\n        \r\n      } else {\r\n        this.status_message = \"Please enter a name of your new task.\" // status message activated for empty task name\r\n      }\r\n    },\r\n    ViewActiveTasks: function() { // view active tasks\r\n      let $tasks = this.tasks.filter(obj => obj.status.done === false);\r\n      $tasks = $tasks.filter(obj => obj.status.deleted === false);\r\n      this.task_preview = $tasks;\r\n      this.on_view = \"active\";\r\n    },\r\n    ViewFinishedTasks: function() { // view finished tasks\r\n      let $tasks = this.tasks.filter(obj => obj.status.done === true);\r\n      $tasks = $tasks.filter(obj => obj.status.deleted === false);\r\n      this.task_preview = $tasks;\r\n      this.on_view = \"finished\";\r\n    },\r\n    ViewDeletedTasks: function() { // view deleted tasks \r\n      this.task_preview = this.tasks.filter(obj => obj.status.deleted === true);\r\n      this.on_view = \"deleted\";\r\n    },\r\n    DeleteTask: function($id) { // delete task function triggered from the child component\r\n      const $task_index = this.tasks.map(e => e.id).indexOf($id); // gets the index using id\r\n      if($task_index > -1) { //verifies if the index is existing in the task array\r\n        this.tasks[$task_index].status.deleted = true; // updates the task to deleted\r\n        this.status_message = \"Task deleted!\";\r\n      } else {\r\n        this.status_message = \"Cannot find the task to delete. Please check with developer.\";\r\n      }\r\n    },\r\n    UpdateTask: function($id) { // update task function triggered from the child component\r\n      const $task_index = this.tasks.map(e => e.id).indexOf($id); // gets the index using id\r\n      if($task_index > -1) { //verifies if the index is existing in the task array\r\n        this.tasks[$task_index].status.done = this.tasks[$task_index].status.done === true ? false : true; // updates done to true or false. \r\n        this.status_message = \"Task updated!\";\r\n      } else {\r\n        this.status_message = \"Cannot find the task to update. Please check with developer.\";\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>","import { render } from \"./ToDoListVuetify.vue?vue&type=template&id=efbaf658\"\nimport script from \"./ToDoListVuetify.vue?vue&type=script&lang=js\"\nexport * from \"./ToDoListVuetify.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./ToDoListVuetifyVersion.vue?vue&type=template&id=5fadb586\"\nimport script from \"./ToDoListVuetifyVersion.vue?vue&type=script&lang=js\"\nexport * from \"./ToDoListVuetifyVersion.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createBlock","_component_ToDoListVuetify","_createElementVNode","class","_hoisted_8","_hoisted_1","_hoisted_2","_hoisted_3","onClick","_cache","args","$options","ViewActiveTasks","_normalizeClass","_ctx","on_view","title","_hoisted_4","_toDisplayString","active_tasks_count","ViewFinishedTasks","_hoisted_5","finished_tasks_count","ViewDeletedTasks","_createVNode","_component_font_awesome_icon","icon","task_preview","length","_createElementBlock","_hoisted_6","_Fragment","_renderList","$task","$index","_component_TaskItem","task","key","onDeleteTask","DeleteTask","onUpdateTask","UpdateTask","_hoisted_7","_hoisted_9","_hoisted_10","_hoisted_11","AddTask","type","onKeydown","_withKeys","_withModifiers","text_entry","$event","status_message","trim","_hoisted_12","name","components","TaskItem","data","tasks","created","local_tasks","JSON","parse","localStorage","getItem","this","setItem","stringify","error","watch","handler","$store","dispatch","deep","computed","$count","reduce","count","obj","status","done","deleted","deleted_task_count","methods","$new_task","id","Math","floor","random","$tasks","filter","$id","$task_index","map","e","indexOf","__exports__","defineComponent","ToDoListVuetify","render"],"sourceRoot":""}